-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
--
-- Setup
--
\c :TEST_DBNAME :ROLE_SUPERUSER
CREATE OR REPLACE FUNCTION ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(timeout INT = -1, mock_start_time INT = 0) RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_db_scheduler_test_run(timeout INT = -1, mock_start_time INT = 0) RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_db_scheduler_test_wait_for_scheduler_finish() RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_params_create() RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_params_destroy() RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_params_reset_time(set_time BIGINT = 0, wait BOOLEAN = false) RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
\set WAIT_ON_JOB 0
\set IMMEDIATELY_SET_UNTIL 1
\set WAIT_FOR_OTHER_TO_ADVANCE 2
-- Remove any default jobs, e.g., telemetry
SELECT _timescaledb_internal.stop_background_workers();
 stop_background_workers 
-------------------------
 t
(1 row)

DELETE FROM _timescaledb_config.bgw_job WHERE TRUE;
TRUNCATE _timescaledb_internal.bgw_job_stat;
SELECT _timescaledb_internal.start_background_workers();
 start_background_workers 
--------------------------
 t
(1 row)

\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
CREATE TABLE public.bgw_log(
    msg_no INT,
    mock_time BIGINT,
    application_name TEXT,
    msg TEXT
);
CREATE VIEW sorted_bgw_log AS
    SELECT * FROM bgw_log ORDER BY mock_time, application_name COLLATE "C", msg_no;
CREATE TABLE public.bgw_dsm_handle_store(
    handle BIGINT
);
INSERT INTO public.bgw_dsm_handle_store VALUES (0);
SELECT ts_bgw_params_create();
 ts_bgw_params_create 
----------------------
 
(1 row)

SELECT * FROM _timescaledb_config.bgw_job;
 id | application_name | job_type | schedule_interval | max_runtime | max_retries | retry_period 
----+------------------+----------+-------------------+-------------+-------------+--------------
(0 rows)

SELECT * FROM timescaledb_information.policy_stats;
 hypertable | job_id | job_type | last_run_success | last_finish | last_start | next_start | total_runs | total_failures 
------------+--------+----------+------------------+-------------+------------+------------+------------+----------------
(0 rows)

SELECT * FROM _timescaledb_catalog.continuous_agg;
 mat_hypertable_id | raw_hypertable_id | user_view_schema | user_view_name | partial_view_schema | partial_view_name | bucket_width | job_id | refresh_lag | user_view_query 
-------------------+-------------------+------------------+----------------+---------------------+-------------------+--------------+--------+-------------+-----------------
(0 rows)

\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
CREATE TABLE test_continuous_agg_table(time int, data int);
SELECT create_hypertable('test_continuous_agg_table', 'time', chunk_time_interval => 10);
NOTICE:  adding not-null constraint to column "time"
           create_hypertable            
----------------------------------------
 (1,public,test_continuous_agg_table,t)
(1 row)

CREATE VIEW test_continuous_agg_view
    WITH ( timescaledb.continuous)
    AS SELECT time_bucket('2', time), SUM(data) as value
        FROM test_continuous_agg_table
        GROUP BY 1;
NOTICE:  adding not-null constraint to column "time_partition_col"
--TODO this should be created as part of CREATE VIEW
SELECT id as raw_table_id FROM _timescaledb_catalog.hypertable WHERE table_name='test_continuous_agg_table' \gset
CREATE TRIGGER continuous_agg_insert_trigger
    AFTER INSERT ON test_continuous_agg_table
    FOR EACH ROW EXECUTE PROCEDURE _timescaledb_internal.continuous_agg_invalidation_trigger(:raw_table_id);
-- min distance from end should be 1
SELECT  mat_hypertable_id, user_view_schema, user_view_name, bucket_width, job_id, refresh_lag FROM _timescaledb_catalog.continuous_agg;
 mat_hypertable_id | user_view_schema |      user_view_name      | bucket_width | job_id | refresh_lag 
-------------------+------------------+--------------------------+--------------+--------+-------------
                 2 | public           | test_continuous_agg_view |            2 |   1000 |           4
(1 row)

SELECT job_id FROM _timescaledb_catalog.continuous_agg \gset
-- job was created
SELECT * FROM _timescaledb_config.bgw_job where id=:job_id;
  id  |          application_name           |       job_type       | schedule_interval | max_runtime | max_retries | retry_period 
------+-------------------------------------+----------------------+-------------------+-------------+-------------+--------------
 1000 | Continuous Aggregate Background Job | continuous_aggregate | @ 12 hours        | @ 0         |          -1 | @ 1 day
(1 row)

-- create 10 time buckets
INSERT INTO test_continuous_agg_table
    SELECT i, i FROM
        (SELECT generate_series(0, 10) as i) AS j;
-- no stats
SELECT job_id, next_start, last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
    FROM _timescaledb_internal.bgw_job_stat
    ORDER BY job_id;
 job_id | next_start | until_next | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+------------+------------+------------------+------------+-----------------+----------------+---------------
(0 rows)

-- no data in view
SELECT * FROM test_continuous_agg_view ORDER BY 1;
 time_bucket | value 
-------------+-------
(0 rows)

-- run first time
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(25);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                    msg                     
--------+-----------+------------------+--------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
(2 rows)

SELECT * FROM _timescaledb_config.bgw_job where id=:job_id;
  id  |          application_name           |       job_type       | schedule_interval | max_runtime | max_retries | retry_period 
------+-------------------------------------+----------------------+-------------------+-------------+-------------+--------------
 1000 | Continuous Aggregate Background Job | continuous_aggregate | @ 12 hours        | @ 0         |          -1 | @ 1 day
(1 row)

-- job ran once, successfully
SELECT job_id, next_start, last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
    FROM _timescaledb_internal.bgw_job_stat
    where job_id=:job_id;
 job_id |          next_start          |          until_next          | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+------------------------------+------------------------------+------------------+------------+-----------------+----------------+---------------
   1000 | Sat Jan 01 04:00:00 2000 PST | Fri Dec 31 16:00:00 1999 PST | t                |          1 |               1 |              0 |             0
(1 row)

-- data before 8
SELECT * FROM test_continuous_agg_view ORDER BY 1;
 time_bucket | value 
-------------+-------
           0 |     1
           2 |     5
           4 |     9
(3 rows)

