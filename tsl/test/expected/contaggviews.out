-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- initialize the bgw mock state to prevent the materialization workers from running
\c :TEST_DBNAME :ROLE_SUPERUSER
CREATE OR REPLACE FUNCTION ts_bgw_params_create() RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
\set WAIT_ON_JOB 0
\set IMMEDIATELY_SET_UNTIL 1
\set WAIT_FOR_OTHER_TO_ADVANCE 2
-- stop the background workers from locking up the tables,
-- and remove any default jobs, e.g., telemetry so bgw_job isn't polluted
SELECT _timescaledb_internal.stop_background_workers();
 stop_background_workers 
-------------------------
 t
(1 row)

DELETE FROM _timescaledb_config.bgw_job WHERE TRUE;
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
SELECT * FROM _timescaledb_config.bgw_job;
 id | application_name | job_type | schedule_interval | max_runtime | max_retries | retry_period 
----+------------------+----------+-------------------+-------------+-------------+--------------
(0 rows)

--TEST1 ---
--basic test with count
create table foo (a integer, b integer, c integer);
select table_name from create_hypertable('foo', 'a', chunk_time_interval=> 10);
NOTICE:  adding not-null constraint to column "a"
 table_name 
------------
 foo
(1 row)

insert into foo values( 3 , 16 , 20);
insert into foo values( 1 , 10 , 20);
insert into foo values( 1 , 11 , 20);
insert into foo values( 1 , 12 , 20);
insert into foo values( 1 , 13 , 20);
insert into foo values( 1 , 14 , 20);
insert into foo values( 2 , 14 , 20);
insert into foo values( 2 , 15 , 20);
insert into foo values( 2 , 16 , 20);
create or replace view mat_m1( a, countb )
WITH ( timescaledb.continuous_agg = 'start')
as
select a, count(b)
from foo
group by time_bucket(1, a), a;
NOTICE:  adding not-null constraint to column "time_partition_col"
SELECT * FROM _timescaledb_config.bgw_job;
  id  |          application_name           |       job_type       | schedule_interval | max_runtime | max_retries | retry_period 
------+-------------------------------------+----------------------+-------------------+-------------+-------------+--------------
 1000 | Continuous Aggregate Background Job | continuous_aggregate | @ 12 hours        | @ 0         |          -1 | @ 1 day
(1 row)

insert into  _timescaledb_internal.ts_internal_mat_m1tab
select a, _timescaledb_internal.partialize_agg(count(b)),
time_bucket(1, a)
,1
from foo
group by time_bucket(1, a) , a ;
select * from mat_m1 order by a ;
 a | countb 
---+--------
 1 |      5
 2 |      3
 3 |      1
(3 rows)

--check triggers on user hypertable --
\c :TEST_DBNAME :ROLE_SUPERUSER
select tgname, tgtype, tgenabled , relname from pg_trigger, pg_class  
where tgrelid = pg_class.oid and pg_class.relname like 'foo'
order by tgname;
            tgname            | tgtype | tgenabled | relname 
------------------------------+--------+-----------+---------
 ts_cagg_invalidation_trigger |     29 | O         | foo
 ts_insert_blocker            |      7 | O         | foo
(2 rows)

\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
-- TEST2 ---
drop view mat_m1 cascade;
NOTICE:  drop cascades to table _timescaledb_internal._hyper_2_2_chunk
SELECT * FROM _timescaledb_config.bgw_job;
 id | application_name | job_type | schedule_interval | max_runtime | max_retries | retry_period 
----+------------------+----------+-------------------+-------------+-------------+--------------
(0 rows)

CREATE TABLE conditions (
      timec        TIMESTAMPTZ       NOT NULL,
      location    TEXT              NOT NULL,
      temperature DOUBLE PRECISION  NULL,
      humidity    DOUBLE PRECISION  NULL
    );
select table_name from create_hypertable( 'conditions', 'timec');
 table_name 
------------
 conditions
(1 row)

insert into conditions values ( '2010-01-01 09:00:00-08', 'SFO', 55, 45);
insert into conditions values ( '2010-01-02 09:00:00-08', 'por', 100, 100);
insert into conditions values ( '2010-01-02 09:00:00-08', 'SFO', 65, 45);
insert into conditions values ( '2010-01-02 09:00:00-08', 'NYC', 65, 45);
insert into conditions values ( '2018-11-01 09:00:00-08', 'NYC', 45, 35);
insert into conditions values ( '2018-11-02 09:00:00-08', 'NYC', 35, 15);
create or replace view mat_m1( timec, minl, sumt , sumh)
WITH ( timescaledb.continuous_agg = 'start')
as
select time_bucket('1day', timec), min(location), sum(temperature),sum(humidity)
from conditions
group by time_bucket('1day', timec);
NOTICE:  adding not-null constraint to column "time_partition_col"
\c :TEST_DBNAME :ROLE_SUPERUSER
insert into  _timescaledb_internal.ts_internal_mat_m1tab
select
 time_bucket('1day', timec), _timescaledb_internal.partialize_agg( min(location)), _timescaledb_internal.partialize_agg( sum(temperature)) , _timescaledb_internal.partialize_agg( sum(humidity))
,1
from conditions
group by time_bucket('1day', timec) ;
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
--should have same results --
select timec, minl, sumt, sumh
from mat_m1
order by timec;
            timec             | minl | sumt | sumh 
------------------------------+------+------+------
 Thu Dec 31 16:00:00 2009 PST | SFO  |   55 |   45
 Fri Jan 01 16:00:00 2010 PST | NYC  |  230 |  190
 Wed Oct 31 17:00:00 2018 PDT | NYC  |   45 |   35
 Thu Nov 01 17:00:00 2018 PDT | NYC  |   35 |   15
(4 rows)

select time_bucket('1day', timec), min(location), sum(temperature), sum(humidity)
from conditions
group by time_bucket('1day', timec)
order by 1;
         time_bucket          | min | sum | sum 
------------------------------+-----+-----+-----
 Thu Dec 31 16:00:00 2009 PST | SFO |  55 |  45
 Fri Jan 01 16:00:00 2010 PST | NYC | 230 | 190
 Wed Oct 31 17:00:00 2018 PDT | NYC |  45 |  35
 Thu Nov 01 17:00:00 2018 PDT | NYC |  35 |  15
(4 rows)

-- TEST3 --
-- drop on table conditions should cascade to materialized mat_v1
-- Oid used in timescaledb_catalog table from catalog table -- TODO
drop table conditions cascade;
NOTICE:  drop cascades to view _timescaledb_internal.ts_internal_mat_m1view
NOTICE:  drop cascades to 2 other objects
CREATE TABLE conditions (
      timec        TIMESTAMPTZ       NOT NULL,
      location    TEXT              NOT NULL,
      temperature DOUBLE PRECISION  NULL,
      humidity    DOUBLE PRECISION  NULL
    );
select table_name from create_hypertable( 'conditions', 'timec');
 table_name 
------------
 conditions
(1 row)

insert into conditions values ( '2010-01-01 09:00:00-08', 'SFO', 55, 45);
insert into conditions values ( '2010-01-02 09:00:00-08', 'por', 100, 100);
insert into conditions values ( '2010-01-02 09:00:00-08', 'NYC', 65, 45);
insert into conditions values ( '2010-01-02 09:00:00-08', 'SFO', 65, 45);
insert into conditions values ( '2010-01-03 09:00:00-08', 'NYC', 45, 55);
insert into conditions values ( '2010-01-05 09:00:00-08', 'SFO', 75, 100);
insert into conditions values ( '2018-11-01 09:00:00-08', 'NYC', 45, 35);
insert into conditions values ( '2018-11-02 09:00:00-08', 'NYC', 35, 15);
insert into conditions values ( '2018-11-03 09:00:00-08', 'NYC', 35, 25);
create or replace view mat_m1( timec, minl, sumth, stddevh)
WITH ( timescaledb.continuous_agg = 'start')
as
select time_bucket('1week', timec) ,
min(location), sum(temperature)+sum(humidity), stddev(humidity)
from conditions
group by time_bucket('1week', timec) ;
NOTICE:  adding not-null constraint to column "time_partition_col"
\c :TEST_DBNAME :ROLE_SUPERUSER
insert into  _timescaledb_internal.ts_internal_mat_m1tab
select
 time_bucket('1week', timec),  _timescaledb_internal.partialize_agg( min(location)), _timescaledb_internal.partialize_agg( sum(temperature)) , _timescaledb_internal.partialize_agg( sum(humidity)), _timescaledb_internal.partialize_agg(stddev(humidity))
,1
from conditions
group by time_bucket('1week', timec) ;
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
--should have same results --
select timec, minl, sumth, stddevh
from mat_m1
order by timec;
            timec             | minl | sumth |     stddevh      
------------------------------+------+-------+------------------
 Sun Dec 27 16:00:00 2009 PST | NYC  |   620 | 23.8746727726266
 Sun Jan 03 16:00:00 2010 PST | SFO  |   175 |                 
 Sun Oct 28 17:00:00 2018 PDT | NYC  |   190 |               10
(3 rows)

select time_bucket('1week', timec) ,
min(location), sum(temperature)+ sum(humidity), stddev(humidity)
from conditions
group by time_bucket('1week', timec)
order by time_bucket('1week', timec);
         time_bucket          | min | ?column? |      stddev      
------------------------------+-----+----------+------------------
 Sun Dec 27 16:00:00 2009 PST | NYC |      620 | 23.8746727726266
 Sun Jan 03 16:00:00 2010 PST | SFO |      175 |                 
 Sun Oct 28 17:00:00 2018 PDT | NYC |      190 |               10
(3 rows)

-- TEST4 --
--materialized view with group by clause + expression in SELECT
-- use previous data from conditions
--drop only the view.
-- TODO catalog entry should get deleted?
-- apply where clause on result of mat_m1 --
drop view mat_m1 cascade;
NOTICE:  drop cascades to 2 other objects
create or replace view mat_m1( timec, minl, sumth, stddevh)
WITH ( timescaledb.continuous_agg = 'start')
as
select time_bucket('1week', timec) ,
min(location), sum(temperature)+sum(humidity), stddev(humidity)
from conditions
where location = 'NYC'
group by time_bucket('1week', timec)
;
NOTICE:  adding not-null constraint to column "time_partition_col"
\c :TEST_DBNAME :ROLE_SUPERUSER
insert into  _timescaledb_internal.ts_internal_mat_m1tab
select
 time_bucket('1week', timec),  _timescaledb_internal.partialize_agg( min(location)), _timescaledb_internal.partialize_agg( sum(temperature)) , _timescaledb_internal.partialize_agg( sum(humidity)), _timescaledb_internal.partialize_agg(stddev(humidity))
,1
from conditions
where location = 'NYC'
group by time_bucket('1week', timec) ;
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
--should have same results --
select timec, minl, sumth, stddevh
from mat_m1
where stddevh is not null
order by timec;
            timec             | minl | sumth |     stddevh      
------------------------------+------+-------+------------------
 Sun Dec 27 16:00:00 2009 PST | NYC  |   210 | 7.07106781186548
 Sun Oct 28 17:00:00 2018 PDT | NYC  |   190 |               10
(2 rows)

select time_bucket('1week', timec) ,
min(location), sum(temperature)+ sum(humidity), stddev(humidity)
from conditions
where location = 'NYC'
group by time_bucket('1week', timec)
order by time_bucket('1week', timec);
         time_bucket          | min | ?column? |      stddev      
------------------------------+-----+----------+------------------
 Sun Dec 27 16:00:00 2009 PST | NYC |      210 | 7.07106781186548
 Sun Oct 28 17:00:00 2018 PDT | NYC |      190 |               10
(2 rows)

-- TEST5 --
---------test with having clause ----------------------
drop view mat_m1 cascade;
NOTICE:  drop cascades to 2 other objects
create or replace view mat_m1( timec, minl, sumth, stddevh)
WITH ( timescaledb.continuous_agg = 'start')
as
select time_bucket('1week', timec) ,
min(location), sum(temperature)+sum(humidity), stddev(humidity)
from conditions
group by time_bucket('1week', timec)
having stddev(humidity) is not null;
NOTICE:  adding not-null constraint to column "time_partition_col"
;
\c :TEST_DBNAME :ROLE_SUPERUSER
insert into  _timescaledb_internal.ts_internal_mat_m1tab
select
 time_bucket('1week', timec),  _timescaledb_internal.partialize_agg( min(location)), _timescaledb_internal.partialize_agg( sum(temperature)) , _timescaledb_internal.partialize_agg( sum(humidity)), _timescaledb_internal.partialize_agg(stddev(humidity))
,1
from conditions
group by time_bucket('1week', timec) ;
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
-- should have same results --
select * from mat_m1
order by sumth;
            timec             | minl | sumth |     stddevh      
------------------------------+------+-------+------------------
 Sun Oct 28 17:00:00 2018 PDT | NYC  |   190 |               10
 Sun Dec 27 16:00:00 2009 PST | NYC  |   620 | 23.8746727726266
(2 rows)

select time_bucket('1week', timec) ,
min(location), sum(temperature)+sum(humidity), stddev(humidity)
from conditions
group by time_bucket('1week', timec)
having stddev(humidity) is not null
order by sum(temperature)+sum(humidity);
         time_bucket          | min | ?column? |      stddev      
------------------------------+-----+----------+------------------
 Sun Oct 28 17:00:00 2018 PDT | NYC |      190 |               10
 Sun Dec 27 16:00:00 2009 PST | NYC |      620 | 23.8746727726266
(2 rows)

-- TEST6 --
--group by with more than 1 group column
-- having clause with a mix of columns from select list + others
drop table conditions cascade;
NOTICE:  drop cascades to view _timescaledb_internal.ts_internal_mat_m1view
NOTICE:  drop cascades to 2 other objects
CREATE TABLE conditions (
      timec       TIMESTAMPTZ       NOT NULL,
      location    TEXT              NOT NULL,
      temperature DOUBLE PRECISION  NULL,
      humidity    DOUBLE PRECISION  NULL,
      lowp        numeric NULL,
      highp       numeric null
    );
select table_name from create_hypertable( 'conditions', 'timec');
 table_name 
------------
 conditions
(1 row)

insert into conditions
select generate_series('2018-12-01 00:00'::timestamp, '2018-12-31 00:00'::timestamp, '1 day'), 'POR', 55, 75, 40, 70;
insert into conditions
select generate_series('2018-11-01 00:00'::timestamp, '2018-12-31 00:00'::timestamp, '1 day'), 'NYC', 35, 45, 50, 40;
insert into conditions
select generate_series('2018-11-01 00:00'::timestamp, '2018-12-15 00:00'::timestamp, '1 day'), 'LA', 73, 55, 71, 28;
--drop view mat_m1 cascade;
create or replace view mat_m1( timec, minl, sumth, stddevh)
WITH ( timescaledb.continuous_agg = 'start')
as
select time_bucket('1week', timec) ,
min(location), sum(temperature)+sum(humidity), stddev(humidity)
from conditions
group by  time_bucket('1week', timec)
having min(location) >= 'NYC' and avg(temperature) > 20
;
NOTICE:  adding not-null constraint to column "time_partition_col"
select attnum , attname from pg_attribute
where attnum > 0 and attrelid =
(Select oid from pg_class where relname like 'ts_internal_mat_m1tab')
order by attnum, attname;
 attnum |      attname       
--------+--------------------
      1 | time_partition_col
      2 | tscol2
      3 | tscol3
      4 | tscol4
      5 | tscol5
      6 | tscol6
      7 | chunk_id
(7 rows)

\c :TEST_DBNAME :ROLE_SUPERUSER
insert into  _timescaledb_internal.ts_internal_mat_m1tab
select
 time_bucket('1week', timec),  _timescaledb_internal.partialize_agg( min(location)), _timescaledb_internal.partialize_agg( sum(temperature)) , _timescaledb_internal.partialize_agg( sum(humidity)), _timescaledb_internal.partialize_agg(stddev(humidity))
,_timescaledb_internal.partialize_agg( avg(temperature))
,1
from conditions
group by time_bucket('1week', timec) ;
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
--should have same results --
select timec, minl, sumth, stddevh
from mat_m1
order by timec, minl;
            timec             | minl | sumth |     stddevh      
------------------------------+------+-------+------------------
 Sun Dec 16 16:00:00 2018 PST | NYC  |  1470 | 15.5662356498831
 Sun Dec 23 16:00:00 2018 PST | NYC  |  1470 | 15.5662356498831
 Sun Dec 30 16:00:00 2018 PST | NYC  |   210 | 21.2132034355964
(3 rows)

select time_bucket('1week', timec) ,
min(location), sum(temperature)+sum(humidity), stddev(humidity)
from conditions
group by  time_bucket('1week', timec)
having min(location) >= 'NYC' and avg(temperature) > 20 and avg(lowp) > 10
order by time_bucket('1week', timec), min(location);
         time_bucket          | min | ?column? |      stddev      
------------------------------+-----+----------+------------------
 Sun Dec 16 16:00:00 2018 PST | NYC |     1470 | 15.5662356498831
 Sun Dec 23 16:00:00 2018 PST | NYC |     1470 | 15.5662356498831
 Sun Dec 30 16:00:00 2018 PST | NYC |      210 | 21.2132034355964
(3 rows)

--TEST6 -- select from internal view
\c :TEST_DBNAME :ROLE_SUPERUSER
insert into _timescaledb_internal.ts_internal_mat_m1tab
select * from _timescaledb_internal.ts_internal_mat_m1view;
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
--lets drop the view and check
drop view mat_m1 cascade;
NOTICE:  drop cascades to 2 other objects
drop table conditions;
CREATE TABLE conditions (
      timec       TIMESTAMPTZ       NOT NULL,
      location    TEXT              NOT NULL,
      temperature DOUBLE PRECISION  NULL,
      humidity    DOUBLE PRECISION  NULL,
      lowp        double precision NULL,
      highp       double precision null,
      allnull     double precision null
    );
select table_name from create_hypertable( 'conditions', 'timec');
 table_name 
------------
 conditions
(1 row)

insert into conditions
select generate_series('2018-12-01 00:00'::timestamp, '2018-12-31 00:00'::timestamp, '1 day'), 'POR', 55, 75, 40, 70, NULL;
insert into conditions
select generate_series('2018-11-01 00:00'::timestamp, '2018-12-31 00:00'::timestamp, '1 day'), 'NYC', 35, 45, 50, 40, NULL;
insert into conditions
select generate_series('2018-11-01 00:00'::timestamp, '2018-12-15 00:00'::timestamp, '1 day'), 'LA', 73, 55, NULL, 28, NULL;
SELECT
  $$
  select time_bucket('1week', timec) ,
  min(location) as col1, sum(temperature)+sum(humidity) as col2, stddev(humidity) as col3, min(allnull) as col4
  from conditions
  group by  time_bucket('1week', timec)
  having min(location) >= 'NYC' and avg(temperature) > 20
  $$ AS "QUERY"
\gset
\set ECHO errors
psql:include/cont_agg_equal.sql:8: NOTICE:  view "mat_test" does not exist, skipping
psql:include/cont_agg_equal.sql:13: NOTICE:  adding not-null constraint to column "time_partition_col"
                           ?column?                            | count 
---------------------------------------------------------------+-------
 Number of rows different between view and original (expect 0) |     0
(1 row)

SELECT
  $$
  select time_bucket('1week', timec), location,
  sum(temperature)+sum(humidity) as col2, stddev(humidity) as col3, min(allnull) as col4
  from conditions
  group by location, time_bucket('1week', timec)
  $$ AS "QUERY"
\gset
\set ECHO errors
psql:include/cont_agg_equal.sql:8: NOTICE:  drop cascades to 2 other objects
psql:include/cont_agg_equal.sql:13: NOTICE:  adding not-null constraint to column "time_partition_col"
                           ?column?                            | count 
---------------------------------------------------------------+-------
 Number of rows different between view and original (expect 0) |     0
(1 row)

--TEST7 -- drop tests for view and hypertable
--DROP tests
\set ON_ERROR_STOP 0
SELECT  h.schema_name AS "MAT_SCHEMA_NAME",
       h.table_name AS "MAT_TABLE_NAME",
       partial_view_name as "PART_VIEW_NAME",
       partial_view_schema as "PART_VIEW_SCHEMA"
FROM _timescaledb_catalog.continuous_agg ca
INNER JOIN _timescaledb_catalog.hypertable h ON(h.id = ca.mat_hypertable_id)
WHERE user_view_name = 'mat_test'
\gset
DROP TABLE :"MAT_SCHEMA_NAME".:"MAT_TABLE_NAME";
ERROR:  cannot drop table _timescaledb_internal.ts_internal_mat_testtab because other objects depend on it
DROP VIEW :"PART_VIEW_SCHEMA".:"PART_VIEW_NAME";
ERROR:  cannot drop the partial view because it is required by a continuous aggregate
DROP VIEW mat_test;
ERROR:  dropping a continous aggregate requires using CASCADE
\set ON_ERROR_STOP 1
--catalog entry still there;
SELECT count(*)
FROM _timescaledb_catalog.continuous_agg ca
WHERE user_view_name = 'mat_test';
 count 
-------
     1
(1 row)

--mat table, user_view, and partial view all there
select count(*) from pg_class where relname = :'PART_VIEW_NAME';
 count 
-------
     1
(1 row)

select count(*) from pg_class where relname = :'MAT_TABLE_NAME';
 count 
-------
     1
(1 row)

select count(*) from pg_class where relname = 'mat_test';
 count 
-------
     1
(1 row)

DROP VIEW mat_test CASCADE;
NOTICE:  drop cascades to 2 other objects
--catalog entry should be gone
SELECT count(*)
FROM _timescaledb_catalog.continuous_agg ca
WHERE user_view_name = 'mat_test';
 count 
-------
     0
(1 row)

--mat table, user_view, and partial view all gone
select count(*) from pg_class where relname = :'PART_VIEW_NAME';
 count 
-------
     0
(1 row)

select count(*) from pg_class where relname = :'MAT_TABLE_NAME';
 count 
-------
     0
(1 row)

select count(*) from pg_class where relname = 'mat_test';
 count 
-------
     0
(1 row)

--test dropping raw table
DROP TABLE conditions;
CREATE TABLE conditions (
      timec       TIMESTAMPTZ       NOT NULL,
      location    TEXT              NOT NULL,
      temperature DOUBLE PRECISION  NULL,
      humidity    DOUBLE PRECISION  NULL,
      lowp        double precision NULL,
      highp       double precision null,
      allnull     double precision null
    );
select table_name from create_hypertable( 'conditions', 'timec');
 table_name 
------------
 conditions
(1 row)

--no data in hyper table on purpose so that CASCADE is not required because of chunks
create or replace view mat_drop_test( timec, minl, sumt , sumh)
WITH ( timescaledb.continuous_agg = 'start')
as
select time_bucket('1day', timec), min(location), sum(temperature),sum(humidity)
from conditions
group by time_bucket('1day', timec);
NOTICE:  adding not-null constraint to column "time_partition_col"
\set ON_ERROR_STOP 0
DROP TABLE conditions;
ERROR:  cannot drop table conditions because other objects depend on it
\set ON_ERROR_STOP 1
SELECT  h.schema_name AS "MAT_SCHEMA_NAME",
       h.table_name AS "MAT_TABLE_NAME",
       partial_view_name as "PART_VIEW_NAME",
       partial_view_schema as "PART_VIEW_SCHEMA"
FROM _timescaledb_catalog.continuous_agg ca
INNER JOIN _timescaledb_catalog.hypertable h ON(h.id = ca.mat_hypertable_id)
WHERE user_view_name = 'mat_drop_test'
\gset
DROP TABLE conditions CASCADE;
NOTICE:  drop cascades to view _timescaledb_internal.ts_internal_mat_drop_testview
--catalog entry should be gone
SELECT count(*)
FROM _timescaledb_catalog.continuous_agg ca
WHERE user_view_name = 'mat_drop_test';
 count 
-------
     0
(1 row)

SELECT * FROM _timescaledb_config.bgw_job;
 id | application_name | job_type | schedule_interval | max_runtime | max_retries | retry_period 
----+------------------+----------+-------------------+-------------+-------------+--------------
(0 rows)

--mat table, user_view, and partial view all gone
select count(*) from pg_class where relname = :'PART_VIEW_NAME';
 count 
-------
     0
(1 row)

select count(*) from pg_class where relname = :'MAT_TABLE_NAME';
 count 
-------
     0
(1 row)

select count(*) from pg_class where relname = 'mat_drop_test';
 count 
-------
     0
(1 row)

